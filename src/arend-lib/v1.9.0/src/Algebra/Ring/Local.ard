\import Algebra.Monoid
\import Algebra.Ring
\import Algebra.Semiring
\import Logic
\import Paths
\import Paths.Meta
\open Monoid(Inv,LInv)

\class LocalRing \extends Ring, NonZeroSemiring {
  | locality (x : E) : Inv x || Inv (x + ide)

  \lemma sum1=>eitherInv (x y : E) (x+y=1 : x + y = ide) : Inv x || Inv y => \case locality (negative x) \with {
    | byLeft -x_inv => byLeft (rewriteI negative-isInv (Ring.negative_inv -x_inv))
    | byRight [-x+1]_inv => byRight (rewriteEq (pmap (negative x +) x+y=1) [-x+1]_inv)
  }

  \lemma sumInv=>eitherInv (x y : E) (q : Inv (x + y)) : Inv x || Inv y =>
    \case sum1=>eitherInv (q.inv * x) (q.inv * y) (inv ldistr *> q.inv-left) \with {
      | byLeft s => byLeft (Inv.factor-right q.inv x (\new LInv q.inv (x + y) q.inv-right) s)
      | byRight s => byRight (Inv.factor-right q.inv y (\new LInv q.inv (x + y) q.inv-right) s)
    }
}

\class LocalCRing \extends LocalRing, CRing
