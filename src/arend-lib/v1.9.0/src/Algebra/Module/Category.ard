\import Algebra.Group.Category
\import Algebra.Module
\import Algebra.Ring
\import Category
\import Category.Meta
\import Paths
\import Paths.Meta

\record LinearMap {R : Ring} \extends AddGroupHom {
  \override Dom : LModule { | R => R }
  \override Cod : LModule { | R => R }
  | func-*c {r : R} {x : Dom} : func (r *c x) = r *c func x
}

\meta LinearMap' A B => LinearMap { | R => _ | Dom => A | Cod => B }

\record BilinearMap {R : Ring} (A B C : LModule' R) (\coerce func : A -> B -> C)
  | linear-left {b : B} : LinearMap' A C { | func => func __ b }
  | linear-right {a : A} : LinearMap' B C { | func => func a }

\instance LModuleCat (R : Ring) : Cat (LModule' R)
  | Hom A B => LinearMap' A B
  | id A => \new LinearMap {
    | func a => a
    | func-+ => idp
    | func-*c => idp
  }
  | o g f => \new LinearMap {
    | func a => g (f a)
    | func-+ => pmap g func-+ *> func-+
    | func-*c => pmap g func-*c *> func-*c
  }
  | id-left => idp
  | id-right => idp
  | o-assoc => idp
  | univalence => sip (\lam (f : LinearMap) g => exts (f.func-zro, \lam x x' => f.func-+, \lam x => f.func-negative, \lam e x => f.func-*c))
