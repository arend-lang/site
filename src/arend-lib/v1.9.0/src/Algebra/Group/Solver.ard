\import Algebra.Group
\import Algebra.Monoid
\import Algebra.Pointed
\import Category.Topos.Sheaf
\import Data.Bool
\import Data.Or
\import Paths

\data GroupTerm (V : \Type)
  | var V
  | :ide
  | :inv (GroupTerm V)
  | \infixl 6 :* (t s : GroupTerm V)

\class Data \noclassifying {G : Group} {V : \Set} (f : V -> G) {
  \func interpret (t : GroupTerm V) : G \elim t
    | var x => f x
    | :ide => ide
    | :inv t => inverse (interpret t)
    | :* t s => interpret t * interpret s
}

\class CData \extends Data {
  | V => Nat
  \override G : CGroup

  \func interpretAdd (t : GroupTerm V) : AbGroup.fromCGroup G \elim t
    | var x => f x
    | :ide => zro {AbGroup.fromCGroup G}
    | :inv t => negative {AbGroup.fromCGroup G} (interpretAdd t)
    | :* t (:inv s) => interpretAdd t - {AbGroup.fromCGroup G} interpretAdd s
    | :* t s => interpretAdd t + {AbGroup.fromCGroup G} interpretAdd s
}