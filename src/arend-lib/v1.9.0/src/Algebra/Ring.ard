\import Algebra.Group
\import Algebra.Monoid
\import Algebra.Semiring
\import Data.Array
\import Logic
\import Logic.Meta
\import Paths
\import Set

\class Ring \extends Semiring, AbGroup {
  | zro_*-left {x} => AddGroup.cancel-left (zro * x) (
    zro * x + zro * x ==< inv rdistr >==
    (zro + zro) * x   ==< pmap (`* x) zro-left >==
    zro * x           ==< inv zro-right >==
    zro * x + zro     `qed
  )
  | zro_*-right {x} => AddGroup.cancel-left (x * zro) (
    x * zro + x * zro ==< inv ldistr >==
    x * (zro + zro)   ==< pmap (x *) zro-left >==
    x * zro           ==< inv zro-right >==
    x * zro + zro     `qed
  )

  \func intCoef (x : Int) : E
    | pos n => natCoef n
    | neg (suc _ \as n) => negative (natCoef n)

  \lemma intCoef_neg (n : Nat) : intCoef (neg n) = negative (natCoef n)
    | 0 => natCoefZero *> inv (pmap negative natCoefZero *> AddGroup.negative_zro)
    | suc n => idp

  \lemma negative_*-left {x y : E} : negative x * y = negative (x * y) =>
    pmap (\lam (t : Inv {AbGroup.toCGroup (\this : Ring)} (x * y)) => t.inv)
         (Inv.levelProp {AbGroup.toCGroup (\this : Ring)}
                     (Inv.lmake {AbGroup.toCGroup (\this : Ring)} (negative x * y) (inv rdistr *> pmap (`* y) negative-left *> zro_*-left))
                     (Inv.lmake {AbGroup.toCGroup (\this : Ring)} (negative (x * y)) negative-left))
    \where \open Monoid(Inv)

  \lemma negative_*-right {x y : E} : x * negative y = negative (x * y) => negative_*-left {op \this}

  \lemma negative_ide-left {x : E} : negative ide * x = negative x
    => negative_*-left *> pmap negative ide-left

  \lemma negative_ide-right {x : E} : x * negative ide = negative x
    => negative_*-right *> pmap negative ide-right

  \lemma negative_* {x y : E}  : negative x * negative y = x * y =>
    negative x * negative y     ==< negative_*-left >==
    negative (x * negative y)   ==< pmap negative negative_*-right >==
    negative (negative (x * y)) ==< negative-isInv >==
    x * y                       `qed

  \lemma negative_inv (j : Monoid.Inv {(\this : Ring)}) : Monoid.Inv (negative j)
    => \new Monoid.Inv {
      | inv => negative j.inv
      | inv-left => negative_* *> j.inv-left
      | inv-right => negative_* *> j.inv-right
    }

  \lemma Big-ldistr {x : E} {l : Array E} : x * BigSum l = BigSum (map (x *) l) \elim l
    | nil => zro_*-right
    | :: a l => ldistr *> pmap (x * a +) Big-ldistr

  \lemma Big-rdistr {x : E} {l : Array E} : BigSum l * x = BigSum (map (`* x) l) \elim l
    | nil => zro_*-left
    | :: a l => rdistr *> pmap (a * x +) Big-rdistr

  \func isNilpotent (x : E) => âˆƒ (n : Nat) (pow x n = 0)
} \where {
  \func op (R : Ring) : Ring \cowith
    | AbGroup => R
    | Semiring => Semiring.op R

  -- | A ring with a tight apartness relation.
  \class With# \extends Ring, AddGroup.With#
    | #0-*-left {x y : E} : (x * y) `#0 -> x `#0
    | #0-*-right {x y : E} : (x * y) `#0 -> y `#0
    | #0-negative {x} x#0 => #0-*-left (transport #0 (inv (negative_* *> ide-right)) x#0)

  -- | A ring with decidable equality.
  \class Dec \extends AddGroup.Dec, With#
    | #0-*-left {x} {y} x*y#0 => \case decideEq x zro \with {
      | yes x=0 => absurd (#0-zro (transport #0 (pmap (`* y) x=0 *> zro_*-left) x*y#0))
      | no x/=0 => nonZeroApart x/=0
    }
    | #0-*-right {x} {y} x*y#0 => \case decideEq y zro \with {
      | yes y=0 => absurd (#0-zro (transport #0 (pmap (x *) y=0 *> zro_*-right) x*y#0))
      | no y/=0 => nonZeroApart y/=0
    }
}

\class CRing \extends Ring, CSemiring
  \where {
    -- | A commutative ring with a tight apartness relation.
    \class With# \extends CRing, Ring.With#
      | #0-*-right x*y#0 => #0-*-left (transport #0 *-comm x*y#0)

    -- | A commutative ring with decidable equality.
    \class Dec \extends Ring.Dec, With#
  }
