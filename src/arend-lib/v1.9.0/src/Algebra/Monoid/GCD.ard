\import Algebra.Meta
\import Algebra.Monoid
\import Algebra.Pointed
\import HLevel
\import Logic
\import Meta
\import Order.Lattice
\import Order.PartialOrder
\import Paths
\import Paths.Meta
\import Relation.Equivalence
\open Monoid(LDiv,Inv)
\open Preorder(PreorderC,EquivRel)

\record GCD {M : CMonoid}
            (val1 val2 gcd : M)
            (gcd|val1 : LDiv gcd val1)
            (gcd|val2 : LDiv gcd val2)
            (gcd-univ : \Pi (g : M) -> LDiv g val1 -> LDiv g val2 -> LDiv g gcd)
  \where {
    \func swap (g : GCD {}) : GCD g.val2 g.val1 g.gcd g.gcd|val2 g.gcd|val1 \cowith
      | gcd-univ g' g'|a g'|b => g.gcd-univ g' g'|b g'|a
  }

\class GCDMonoid \extends CancelCMonoid
  | isGCD (x y : E) : TruncP (GCD x y)

-- | Monoids with a unique unit. This is useful because the GCD relation on them is functional.
\class UnitlessMonoid \extends CancelCMonoid {
  | uniqueUnit (j : Inv) : j.val = ide

  \lemma div-eq {x y : E} (d1 : LDiv x y) (d2 : LDiv y x) : x = y =>
    \have d1=ide : d1.inv = ide => uniqueUnit (Inv.lmake d2.inv (cancel-left y equation))
    \in equation {usingOnly d1=ide} (x * d1.inv)

  \lemma GCD-isProp (x y : E) : isProp (GCD x y) =>
    \lam (g1 g2 : GCD x y) =>
        \have p => div-eq (g2.gcd-univ g1.gcd g1.gcd|val1 g1.gcd|val2)
            (g1.gcd-univ g2.gcd g2.gcd|val1 g2.gcd|val2)
        \in path (\lam i => \new GCD x y {
          | gcd => p @ i
          | gcd|val1 => pathOver (LDiv.levelProp g2.gcd x (coe (\lam j => LDiv (p @ j) x) g1.gcd|val1 right) g2.gcd|val1) @ i
          | gcd|val2 => pathOver (LDiv.levelProp g2.gcd y (coe (\lam j => LDiv (p @ j) y) g1.gcd|val2 right) g2.gcd|val2) @ i
          | gcd-univ g g|x g|y => pathOver (LDiv.levelProp g g2.gcd (coe (\lam j => LDiv g (p @ j)) (g1.gcd-univ g g|x g|y) right) (g2.gcd-univ g g|x g|y)) @ i
        })

  \lemma gcd-isUnique {x y : E} (g g' : GCD x y) : g.gcd = g'.gcd
    => pmap (\lam (g : GCD x y) => g.gcd) (GCD-isProp x y g g')
}

-- | GCD monoids with a unique unit. This is useful because the GCD relation on them is functional.
\class UnitlessGCDMonoid \extends UnitlessMonoid, GCDMonoid {
  \lemma gcdC (x y : E) : GCD x y \level GCD-isProp x y
    => TruncP.remove (GCD-isProp x y) (isGCD x y)

  \func gcd (x y : E) => GCD.gcd {gcdC x y}

  \lemma gcd_~ {x y : E} (g : GCD x y) : g.gcd = gcd x y
    => gcd-isUnique g (gcdC x y)

  \lemma gcd_*-left (c a b : E) : c * gcd a b = gcd (c * a) (c * b) =>
    \let | d : GCD a b => gcdC a b
         | e : GCD (c * a) (c * b) => gcdC (c * a) (c * b)
         | cd|e : LDiv (c * d.gcd) e.gcd => e.gcd-univ (c * d.gcd) (LDiv.product-left c d.gcd a d.gcd|val1)
                                                       (LDiv.product-left c d.gcd b d.gcd|val2)
         | x => cd|e.inv
         | c[xd]=e =>
             c * (x * d.gcd) ==< pmap (c *) *-comm >==
             c * (d.gcd * x) ==< inv *-assoc >==
             (c * d.gcd) * x ==< cd|e.inv-right >==
             e.gcd           `qed
         | xd|d : LDiv (x * d.gcd) d.gcd =>
             d.gcd-univ (x * d.gcd)
                        (LDiv.cancel-left a (rewrite c[xd]=e e.gcd|val1))
                        (LDiv.cancel-left b (rewrite c[xd]=e e.gcd|val2))
    \in pmap (c *) (div-eq (\new LDiv d.gcd (x * d.gcd) x *-comm) xd|d) *> c[xd]=e

  \lemma gcd_*-right (a b c : E) : gcd a b * c = gcd (a * c) (b * c)
    => *-comm *> gcd_*-left c a b *> pmap2 gcd *-comm *-comm

  -- | Every unit-less GCD-monoid is a semilattice.
  \func DivLattice : JoinSemilattice E \cowith
    | <= x y => LDiv y x
    | <=-refl {x} => \new LDiv x x ide ide-right
    | <=-transitive y|x z|y => LDiv.trans z|y y|x
    | <=-antisymmetric y|x x|y => div-eq x|y y|x
    | âˆ¨ => gcd
    | join-left {x} {y} => GCD.gcd|val1 {gcdC x y}
    | join-right {x} {y} => GCD.gcd|val2 {gcdC x y}
    | join-univ => GCD.gcd-univ _

  \lemma gcd_*-comm (a b c : E) : gcd a (b * c) = gcd a (gcd a b * c) =>
    gcd a (b * c)               ==< pmap (`gcd (b * c)) (inv (DivLattice.join_<= (\new LDiv a (a * c) c idp))) >==
    gcd (gcd (a * c) a) (b * c) ==< pmap (\lam x => gcd x (b * c)) DivLattice.join-comm >==
    gcd (gcd a (a * c)) (b * c) ==< DivLattice.join-assoc >==
    gcd a (gcd (a * c) (b * c)) ==< pmap (gcd a) (inv (gcd_*-right a b c)) >==
    gcd a (gcd a b * c)         `qed

  \lemma gcd_*_div (a b c : E) (a|bc : LDiv a (b * c)) : LDiv a (gcd a b * c)
    => rewriteI {1} (inv (gcd_*-comm a b c) *> DivLattice.join-comm *> DivLattice.join_<= a|bc)
                    (GCD.gcd|val2 {gcdC a (gcd a b * c)})
}

-- | The quotient of a monoid by the equivalence relation ``x ~ y`` iff ``x | y`` and ``y | x``.
\func DivQuotient (M : CMonoid) => PreorderC {DivPreoder M}
  \where {
    {- | The preoreder on a monoid in which ``x <= y`` iff ``y | x``.
     -   We define {DivQuotient} as the poset completion of this preorder.
     -}
    \func DivPreoder (M : CMonoid) : Preorder M \cowith
      | <= x y => TruncP (LDiv y x)
      | <=-refl {x} => inP (\new LDiv x x ide ide-right)
      | <=-transitive {x} {y} {z} (inP y|x) (inP z|y) => inP (LDiv.trans z|y y|x)

    \func \infix 4 ~ {M : CMonoid} => Equivalence.~ {EquivRel {DivPreoder M}}

    \cons inD {M : CMonoid} (x : M) : DivQuotient M => in~ x

    \lemma make~ {M : CMonoid} (x y : M) (p : inD x = inD y) : x ~ y =>
      Quotient.equalityEquiv (Preorder.EquivRel {DivPreoder M}) p

    \lemma equivalent-areAssociates {M : CancelCMonoid} (x y : M) (p : x ~ y) : areAssociates x y \elim p
       | (inP (y|x : LDiv y x), inP (x|y : LDiv x y)) =>
           (\new Inv y|x.inv x|y.inv {
             | inv-left => cancel-left x (inv *-assoc *> pmap (`* _) x|y.inv-right *> y|x.inv-right *> inv ide-right)
             | inv-right => cancel-left y (inv *-assoc *> pmap (`* _) y|x.inv-right *> x|y.inv-right *> inv ide-right)
           }, inv y|x.inv-right *> *-comm)

    -- | The quotient monoid is indeed a monoid.
    \instance DivQuotientMonoid (M : CMonoid) : CMonoid (DivQuotient M)
      | ide => inD ide
      | * => *'
      | ide-left {inD x} => pmap inD ide-left
      | *-assoc {inD x} {inD y} {inD z} => pmap inD *-assoc
      | *-comm {inD x} {inD y} => pmap inD *-comm
    \where {
      \func \infixl 7 *' {M : CMonoid} (x y : DivQuotient M) : DivQuotient M
        | inD x, inD y => inD (x * y)
        | inD x, ~-equiv y y' y~y' i => ~-equiv (x * y) (x * y') (\case y~y' \with {
          | (inP y'|y, inP y|y') => (inP (LDiv.product-left x y' y y'|y), inP (LDiv.product-left x y y' y|y'))
        }) i
        | ~-equiv x x' x~x' i, inD y => ~-equiv (x * y) (x' * y) (\case x~x' \with {
          | (inP x'|x, inP x|x') => (inP (LDiv.product-right x' x y x'|x), inP (LDiv.product-right x x' y x|x'))
        }) i
    }

    -- | If the original monoid is cancellative, then so is the quotient monoid.
    \instance DivQuotientCancelMonoid (M : CancelCMonoid) : UnitlessMonoid
      | CMonoid => DivQuotientMonoid M
      | cancel-left (inD x) {inD y} {inD z} x*y=x*z => path (~-equiv y z (
          \case make~ (x * y) (x * z) x*y=x*z \return y ~ z \with {
            | (inP x*z|x*y, inP x*y|x*z) => (inP (LDiv.cancel-left y x*z|x*y), inP (LDiv.cancel-left z x*y|x*z))
          }))
      | uniqueUnit (j : Inv) => \case j.val \as [x], j.inv \as [y], j.inv-right : [x] * [y] = inD ide \return [x] = inD ide \with {
        | inD x, inD y, p => path (~-equiv x ide (inv~ide (\have d : LDiv x ide => div-from~ (\new LDiv { | inv => inD y | inv-right => p }) \in Inv.rmake d.inv d.inv-right)))
      }

    \lemma inv~ide {M : CMonoid} (i : Inv {M}) : i ~ ide =>
      (inP (\new LDiv ide i i ide-left), inP (\new LDiv i ide i.inv i.inv-right))

    \func div-to~ {M : CMonoid} {x y : M} (x|y : LDiv x y) : LDiv (inD x) (inD y) \cowith
      | inv => inD x|y.inv
      | inv-right => pmap inD x|y.inv-right

    \lemma div-from~ {M : CancelCMonoid} {x y : M} (d : LDiv (inD x) (inD y)) : LDiv x y =>
      \case d.inv \as i, d.inv-right : inD x * i = inD y \return LDiv x y \with {
        | inD i, ~x*i=y => \case (make~ (x * i) y ~x*i=y).2 \return LDiv x y \with {
          | inP (x*i|y : LDiv (x * i) y) => \new LDiv x y (i * x*i|y.inv) (inv *-assoc *> x*i|y.inv-right)
        }
      }

    -- | If the original monoid is a GCD-monoid, then the quotient monoid is a unit-less GCD-monoid.
    \instance DivQuotientGCDMonoid (M : GCDMonoid) : UnitlessGCDMonoid
      | UnitlessMonoid => DivQuotientCancelMonoid M
      | isGCD (inD x) (inD y) => TruncP.map (isGCD x y) (\lam (g : GCD x y) => \new GCD (inD x) (inD y) (inD g.gcd) {
        | gcd|val1 => div-to~ g.gcd|val1
        | gcd|val2 => div-to~ g.gcd|val2
        | gcd-univ [g'] [g']|x [g']|y =>
          \case \elim [g'], [g']|x, [g']|y \return LDiv [g'] (inD g.gcd) \level LDiv.levelProp [g'] (inD g.gcd) \with {
            | inD g', (inD x', ~x'*g'=x), (inD y', ~y'*g'=y) =>
                div-to~ (g.gcd-univ g' (div-from~ (\new LDiv { | inv => inD x' | inv-right => ~x'*g'=x }))
                                       (div-from~ (\new LDiv { | inv => inD y' | inv-right => ~y'*g'=y })))
          }
      })

    \func gcd-to~ {M : CancelCMonoid} {x y z : M} (g : GCD x y z) : GCD (inD x) (inD y) (inD z) \cowith
      | gcd|val1 => div-to~ g.gcd|val1
      | gcd|val2 => div-to~ g.gcd|val2
      | gcd-univ [g] [g]|[x] [g]|[y] =>
          \case \elim [g], [g]|[x], [g]|[y] \return LDiv [g] (inD z) \level LDiv.levelProp [g] (inD z) \with {
            | inD g', ~g'|x, ~g'|y => div-to~ (g.gcd-univ g' (div-from~ ~g'|x) (div-from~ ~g'|y))
          }
  }

\lemma gcd_*_div {M : GCDMonoid} (a b c : M) (a|bc : LDiv a (b * c)) (a_b : GCD a b ide) : LDiv a c
  => div-from~ (later rewriteI (pmap (`* inD c) (inv (gcd_~ (gcd-to~ a_b))) *> ide-left {_} {inD c})
                               (gcd_*_div (inD a) (inD b) (inD c) (div-to~ a|bc)))
  \where {
    \open UnitlessGCDMonoid
    \open DivQuotient
  }

\func div_gcd {M : CMonoid} {a b : M} (a|b : LDiv a b) : GCD b a a \cowith
  | gcd|val1 => a|b
  | gcd|val2 => \new LDiv { | inv => 1 | inv-right => ide-right }
  | gcd-univ g g|b g|a => g|a

\func gcd_reduced=1 {M : CancelCMonoid} (gcd : GCD {M}) : GCD gcd.gcd|val1.inv gcd.gcd|val2.inv 1
  => aux gcd (cancel-left gcd.gcd)
  \where
    \func aux {M : CMonoid} (gcd : GCD {M}) (cancel : \Pi {x y : M} -> gcd.gcd * x = gcd.gcd * y -> x = y) : GCD gcd.gcd|val1.inv gcd.gcd|val2.inv 1 \cowith
      | gcd|val1 => \new LDiv {
        | inv => gcd.gcd|val1.inv
        | inv-right => ide-left
      }
      | gcd|val2 => \new LDiv {
        | inv => gcd.gcd|val2.inv
        | inv-right => ide-left
      }
      | gcd-univ g (g|inv1 : LDiv) (g|inv2 : LDiv) => CMonoid.divInv cancel (gcd.gcd-univ (gcd.gcd * g)
          (\new LDiv {
            | inv => g|inv1.inv
            | inv-right => *-assoc *> pmap (_ *) g|inv1.inv-right *> gcd.gcd|val1.inv-right
          })
          (\new LDiv {
            | inv => g|inv2.inv
            | inv-right => *-assoc *> pmap (_ *) g|inv2.inv-right *> gcd.gcd|val2.inv-right
          }))

\lemma gcd-isUnique {M : CancelCMonoid} {a b : M} (g1 g2 : GCD a b) : areAssociates g1.gcd g2.gcd
  => equivalent-areAssociates g1.gcd g2.gcd (make~ g1.gcd g2.gcd (gcd-isUnique (gcd-to~ g1) (gcd-to~ g2)))
  \where {
    \open DivQuotient
    \open UnitlessMonoid
  }